{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport Complex64 from '@stdlib/complex-float32';\n\n\n// MAIN //\n\n/**\n* Negates a single-precision complex floating-point number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( -4.2, 5.5 );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns ~4.2\n*\n* var im = imagf( out );\n* // returns -5.5\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( 0.0, 0.0 );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns -0.0\n*\n* var im = imagf( out );\n* // returns -0.0\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = new Complex64( NaN, NaN );\n* // returns <Complex64>\n*\n* var out = cnegf( z );\n* // returns <Complex64>\n*\n* var re = realf( out );\n* // returns NaN\n*\n* var im = imagf( out );\n* // returns NaN\n*/\nfunction cnegf( z ) {\n\treturn new Complex64( -realf( z ), -imagf( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cnegf;\n"],"names":["cnegf","z","Complex64","realf","imagf"],"mappings":";;mQAsFA,SAASA,EAAOC,GACf,OAAO,IAAIC,GAAYC,EAAOF,IAAMG,EAAOH,GAC5C"}